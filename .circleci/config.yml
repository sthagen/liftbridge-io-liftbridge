version: 2.1
jobs:
  # Build development binary
  build-dev:
    docker:
      - image: liftbridge/liftbridge-circleci:0.2.0
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Build dev binary
          command: |
            make build-dev
      - persist_to_workspace:
          root: .
          paths:
            - liftbridge-dev
            - docker/

  # Run unit/integration tests and upload code coverage
  test:
    docker:
      - image: liftbridge/liftbridge-circleci:0.2.0
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            go get github.com/mattn/goveralls
      - run:
          name: Test
          command: |
            go test -v -race . # Run tests in root but exclude from coverage
            go test -v -race -coverprofile=coverage.txt.tmp ./server/...
            cat coverage.txt.tmp | grep -v ".pb.go" > coverage.txt # Exclude protobuf from coverage
            goveralls -coverprofile=coverage.txt -service=circle-ci -repotoken=$COVERALLS_REPO_TOKEN

  # Build and publish standalone development Docker image
  build-and-push-standalone-dev-image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/project
      - run:
          name: Set image version
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
                echo "export VERSION='${CIRCLE_TAG}'" >> $BASH_ENV
            else
                echo "export VERSION='${CIRCLE_SHA1}'" >> $BASH_ENV
            fi
      - run:
          name: Build image
          command: |
            docker build -t "liftbridge/standalone-dev:${VERSION}" -f docker/dev-standalone/Dockerfile .
            docker tag "liftbridge/standalone-dev:${VERSION}" 'liftbridge/standalone-dev:latest'
      - run:
          name: Publish image
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push "liftbridge/standalone-dev:${VERSION}"
            docker push 'liftbridge/standalone-dev:latest'

  # Build and publish release Docker image
  build-and-push-release-image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Set image version
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
                echo "export VERSION='${CIRCLE_TAG}'" >> $BASH_ENV
            else
                echo "export VERSION='${CIRCLE_SHA1}'" >> $BASH_ENV
            fi
      - run:
          name: Build image
          command: |
            docker build -t "liftbridge/liftbridge:${VERSION}" .
            docker tag "liftbridge/liftbridge:${VERSION}" 'liftbridge/liftbridge:latest'
      - run:
          name: Publish image
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push "liftbridge/liftbridge:${VERSION}"
            docker push 'liftbridge/liftbridge:latest'

  # Build and publish release k8s Docker image
  build-and-push-release-k8s-image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Set image version
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
                echo "export VERSION='${CIRCLE_TAG}'" >> $BASH_ENV
            else
                echo "export VERSION='${CIRCLE_SHA1}'" >> $BASH_ENV
            fi
      - run:
          name: Build image
          command: |
            docker build -t "liftbridge/liftbridge-k8s:${VERSION}" -f k8s/Dockerfile.k8s .
            docker tag "liftbridge/liftbridge-k8s:${VERSION}" 'liftbridge/liftbridge-k8s:latest'
      - run:
          name: Publish image
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push "liftbridge/liftbridge-k8s:${VERSION}"
            docker push 'liftbridge/liftbridge-k8s:latest'

  # Create GitHub release and upload artifacts
  release:
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - run: curl -sL https://git.io/goreleaser | bash

  # Build website artifacts
  build-website:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Build website
          command: |
            yarn --cwd website
            make website/build
      - persist_to_workspace:
          root: .
          paths:
            - Makefile
            - website/

  # Deploy website to Google App Engine
  deploy-website:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Deploy website
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project $GCLOUD_PROJECT_ID
            make website-deploy WEBSITE_DEPLOY_FLAGS=--quiet

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build-dev:
          filters:
            tags:
              only: /^v.*/
      - test
      - build-and-push-standalone-dev-image:
          context: docker-push
          requires:
            - build-dev
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
      - build-and-push-release-image:
          context: docker-push
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
      - build-and-push-release-k8s-image:
          context: docker-push
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
      - release:
          context: github-push
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
      - build-website:
          filters:
            branches:
              only: master
      - deploy-website:
          context: website-push
          requires:
            - build-website
          filters:
            branches:
              only: master
